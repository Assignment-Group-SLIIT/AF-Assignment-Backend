{"version":3,"sources":["message.controller.js"],"names":["Message","require","req","res","next","getMessages","to","console","log","from","find","users","$all","sort","updatedAt","messages","projectedMessages","map","msg","fromSelf","sender","toString","message","text","json","_req$body2","regeneratorRuntime","async","_context2","prev","body","awrap","create","sent","abrupt","t0","stop","module","exports","addMessage"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,2BAAlBD,YAAUC,SAAQC,EAAAC,EAAAC,GAARH,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAEVI,EAAAA,KAAAA,EAFUJ,EAEVI,KAAcC,EAFJL,EAEIK,GAAAC,QAAAC,IAAAC,GAFJR,EAAAA,KAAAA,EAAAA,mBAAAA,MAMaD,QAAQU,KAAK,CAJtBC,MAAA,CAAAC,KAAA,CAAAH,EAAAH,MAAAO,KAAA,CAAAC,UAAA,KAFJb,KAAAA,EAMJc,EANId,EAAAA,KAEIe,EAENP,EAFMQ,IAAA,SAAAC,GAGdX,MAAAA,CAHcY,SAAAD,EAAAE,OAAAC,aAAAZ,EAAAa,QAAAJ,EAAAI,QAAAC,QAKLpB,EAAAqB,KAAAR,GAPCf,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAUAa,EAAAA,EAAAA,IAVAb,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAMJc,WAJQ,SAAAb,EAAAC,EAAAC,GAAA,IAAAqB,EAAAd,EAAAS,EAAAE,EAAA,OAAAI,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAxB,MAAA,KAAA,EAAA,OAAAwB,EAAAC,KAAA,EAAAJ,EAAAvB,EAAA4B,KAYVX,EAZUM,EAYVN,MACAG,EAbUG,EAaVH,OAFKA,EAXKG,EAWLH,QAXKM,EAAAxB,KAAA,EAAAsB,mBAAAK,MAAA/B,QAAAgC,OAAA,CAAAV,QAAA,CAAAC,KAAAD,GAgCZX,MAAAA,EAhCYS,OAAAA,KAAA,KAAA,EAAA,GAAAQ,EAAAK,KAAA,OAAAL,EAAAM,OAAA,SAkBd/B,EAAAqB,KAAA,CAAAN,IAAA,iCAlBcU,EAAAxB,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAwB,EAAAM,OAAA,SAqCF/B,EAAIqB,KAAK,CAAEN,IAAK,2CArCd,KAAA,GAAAU,EAAAxB,KAAA,GAAA,MAAA,KAAA,GAAAwB,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,MAAA,GAAAxB,EAAAwB,EAAAO,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAP,EAAAQ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAC,OAAAC,QAAA,CAApBjC,YAAAA,YA6CMkC,WAAAA","file":"message.controller.min.js","sourcesContent":["const Message = require(\"../models/message.model\");\r\n\r\nconst getMessages = async (req, res, next) => {\r\n    try {\r\n      const { from, to } = req.body;\r\n      console.log(from);\r\n      const messages = await Message.find({\r\n        users: {\r\n          $all: [from, to],\r\n        },\r\n      }).sort({ updatedAt: 1 });\r\n  \r\n      const projectedMessages = messages.map((msg) => {\r\n        return {\r\n          fromSelf: msg.sender.toString() === from,\r\n          message: msg.message.text,\r\n        };\r\n      });\r\n      res.json(projectedMessages);\r\n    } catch (ex) {\r\n      next(ex);\r\n    }\r\n  };\r\n  \r\nconst addMessage = async (req, res, next) => {\r\n    try {\r\n      const { \r\n          users, \r\n          sender, \r\n          message \r\n        } = req.body;\r\n      \r\n      const response = await Message.create({\r\n        message: { text: message },\r\n        users,\r\n        sender,\r\n      });\r\n      \r\n      if (response) return res.json({ msg: \"Message added successfully.\" });\r\n      else return res.json({ msg: \"Failed to add message to the database\" });\r\n    } catch (ex) {\r\n      next(ex);\r\n    }\r\n  };\r\n  \r\n  module.exports ={\r\n      getMessages,\r\n      addMessage\r\n  }"]}