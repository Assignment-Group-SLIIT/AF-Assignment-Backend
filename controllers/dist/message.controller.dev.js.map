{"version":3,"sources":["message.controller.js"],"names":["Message","require","getMessages","req","res","next","body","from","to","console","log","find","users","$all","sort","updatedAt","messages","projectedMessages","map","msg","fromSelf","sender","toString","message","text","json","addMessage","create","response","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,yBAAD,CAAvB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEOF,GAAG,CAACG,IAFX,EAENC,IAFM,aAENA,IAFM,EAEAC,EAFA,aAEAA,EAFA;AAGdC,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAHc;AAAA,0CAISP,OAAO,CAACW,IAAR,CAAa;AAClCC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,CAACN,IAAD,EAAOC,EAAP;AADD;AAD2B,WAAb,EAIpBM,IAJoB,CAIf;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAJe,CAJT;;AAAA;AAIRC,UAAAA,QAJQ;AAURC,UAAAA,iBAVQ,GAUYD,QAAQ,CAACE,GAAT,CAAa,UAACC,GAAD,EAAS;AAC9C,mBAAO;AACLC,cAAAA,QAAQ,EAAED,GAAG,CAACE,MAAJ,CAAWC,QAAX,OAA0Bf,IAD/B;AAELgB,cAAAA,OAAO,EAAEJ,GAAG,CAACI,OAAJ,CAAYC;AAFhB,aAAP;AAID,WALyB,CAVZ;AAgBdpB,UAAAA,GAAG,CAACqB,IAAJ,CAASR,iBAAT;AAhBc;AAAA;;AAAA;AAAA;AAAA;AAkBdZ,UAAAA,IAAI,aAAJ;;AAlBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAsBA,IAAMqB,UAAU,GAAG,SAAbA,UAAa,CAAOvB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMPF,GAAG,CAACG,IANG,EAGTM,KAHS,cAGTA,KAHS,EAITS,MAJS,cAITA,MAJS,EAKTE,OALS,cAKTA,OALS;AAAA;AAAA,0CAQUvB,OAAO,CAAC2B,MAAR,CAAe;AACpCJ,YAAAA,OAAO,EAAE;AAAEC,cAAAA,IAAI,EAAED;AAAR,aAD2B;AAEpCX,YAAAA,KAAK,EAALA,KAFoC;AAGpCS,YAAAA,MAAM,EAANA;AAHoC,WAAf,CARV;;AAAA;AAQPO,UAAAA,QARO;;AAAA,eAcTA,QAdS;AAAA;AAAA;AAAA;;AAAA,4CAcQxB,GAAG,CAACqB,IAAJ,CAAS;AAAEN,YAAAA,GAAG,EAAE;AAAP,WAAT,CAdR;;AAAA;AAAA,4CAeDf,GAAG,CAACqB,IAAJ,CAAS;AAAEN,YAAAA,GAAG,EAAE;AAAP,WAAT,CAfC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBbd,UAAAA,IAAI,cAAJ;;AAjBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAqBEwB,MAAM,CAACC,OAAP,GAAgB;AACZ5B,EAAAA,WAAW,EAAXA,WADY;AAEZwB,EAAAA,UAAU,EAAVA;AAFY,CAAhB","sourcesContent":["const Message = require(\"../models/message.model\");\r\n\r\nconst getMessages = async (req, res, next) => {\r\n    try {\r\n      const { from, to } = req.body;\r\n      console.log(from);\r\n      const messages = await Message.find({\r\n        users: {\r\n          $all: [from, to],\r\n        },\r\n      }).sort({ updatedAt: 1 });\r\n  \r\n      const projectedMessages = messages.map((msg) => {\r\n        return {\r\n          fromSelf: msg.sender.toString() === from,\r\n          message: msg.message.text,\r\n        };\r\n      });\r\n      res.json(projectedMessages);\r\n    } catch (ex) {\r\n      next(ex);\r\n    }\r\n  };\r\n  \r\nconst addMessage = async (req, res, next) => {\r\n    try {\r\n      const { \r\n          users, \r\n          sender, \r\n          message \r\n        } = req.body;\r\n      \r\n      const response = await Message.create({\r\n        message: { text: message },\r\n        users,\r\n        sender,\r\n      });\r\n      \r\n      if (response) return res.json({ msg: \"Message added successfully.\" });\r\n      else return res.json({ msg: \"Failed to add message to the database\" });\r\n    } catch (ex) {\r\n      next(ex);\r\n    }\r\n  };\r\n  \r\n  module.exports ={\r\n      getMessages,\r\n      addMessage\r\n  }"],"file":"message.controller.dev.js"}