{"version":3,"sources":["cosupervisorRequests.controller.js"],"names":["CoSupervisorRequest","require","req","res","groupId","email","researchTopic","researchField","coSupervisor","newCoSupervisorRequest","regeneratorRuntime","async","_context","prev","next","body","createCoSupervisorRequest","awrap","save","sent","abrupt","status","send","message","t0","stop","getAllRequestTopic","response","_context2","find","data","getAllRequestsofCoSupervisor","cosupervisor","_context3","params","name","supervisor","json","getOneRequest","_context4","id","findOne"],"mappings":"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","file":"cosupervisorRequests.controller.min.js","sourcesContent":["const CoSupervisorRequest = require('../models/cosupervisorRequests.model');\r\n\r\nconst createCoSupervisorRequest = async (req, res) => {\r\n    const groupId = req.body.groupId;\r\n    const email = req.body.email;\r\n    const researchTopic = req.body.researchTopic;\r\n    const researchField = req.body.researchField;\r\n    const coSupervisor = req.body.coSupervisor;\r\n\r\n    const newCoSupervisorRequest = new CoSupervisorRequest({\r\n        groupId,\r\n        email,\r\n        coSupervisor,\r\n        researchTopic,\r\n        researchField\r\n    })\r\n\r\n    try {\r\n        let response = await newCoSupervisorRequest.save();\r\n        if (response) {\r\n            return res.status(201).send({ message: \"Register topic to co-supervisor\" })\r\n        } else {\r\n            return res.status(500).send({ message: \"Internal server error\" })\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'error while register topic' })\r\n    }\r\n\r\n}\r\n\r\nconst getAllRequestTopic = async (req, res) => {\r\n    try {\r\n        let response = await CoSupervisorRequest.find();\r\n        if (response) {\r\n            return res.status(200).send({ message: \"get all request topic\", data: response })\r\n        } else {\r\n            return res.status(500).send({ message: \"Internal server error\" })\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ message: \"error while getting request topic\" })\r\n    }\r\n}\r\n\r\nconst getAllRequestsofCoSupervisor = async (req, res) => {\r\n\r\n    const cosupervisor = req.params.name;\r\n\r\n    try {\r\n        let response = await CoSupervisorRequest\r\n        .find({supervisor: cosupervisor});\r\n        if (response) {\r\n            return res.json(response)\r\n        } else {\r\n            return res.status(404).send({ message: 'Error on retrieving request list of Co-supervisors' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nconst getOneRequest = async (req, res) => {\r\n\r\n    const groupId = req.params.id;\r\n\r\n    try {\r\n        let response = await CoSupervisorRequest.findOne({ groupId: groupId });\r\n        if (response) {\r\n            return res.json(response)\r\n        } else {\r\n            return res.status(404).send({ message: 'No such request available' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n// const updateCoSupervisorRequest = async (req, res) => {\r\n\r\n//     const groupId = req.params.id;\r\n\r\n//     const updateCoSupervisorRequest = {\r\n//          groupId  :req.body.groupId,\r\n//          email : req.body.email,\r\n//          researchTopic : req.body.researchTopic,\r\n//          researchField : req.body.researchField,\r\n//          coSupervisor : req.body.coSupervisor\r\n//     }\r\n\r\n//     try {\r\n//         const response = await CoSupervisorRequest.findOneAndUpdate({ groupId: groupId }, updateCoSupervisorRequest)\r\n//         if (response) {\r\n//             return res.status(200).send({ message: 'Successfully updated Supervisor request' });\r\n//         } else {\r\n//             return res.status(500).send({ message: 'Internal server error' });\r\n//         }\r\n//     } catch (err) {\r\n//         return res.status(400).send({ message: 'Unable to update' })\r\n//     }\r\n\r\n// }\r\n\r\n// const deleteCoSupervisorRequest = async (req, res) => {\r\n//     const groupId = req.params.id;\r\n\r\n//     try {\r\n//         const response = await Group.findOneAndDelete({ groupId: groupId });\r\n//         if (response) {\r\n//             return res.status(204).send({ message: 'Successfully deleted a Request' });\r\n//         } else {\r\n//             return res.status(500).send({ message: 'Internal server error' });\r\n//         }\r\n\r\n//     } catch (err) {\r\n//         return res.status(400).send({ message: 'Could not delete the request' })\r\n//     }\r\n\r\n// }\r\n\r\nmodule.exports = {\r\n    createCoSupervisorRequest,\r\n    getAllRequestTopic,\r\n    getAllRequestsofCoSupervisor,\r\n    getOneRequest\r\n}\r\n"]}