{"version":3,"sources":["user.controller.js"],"names":["bcrypt","require","request","auth","User","register","req","res","fullname","body","studentId","email","contactNo","degree","pwd","password","role","groupId","isAvailable","department","field","salt","genSaltSync","hashSync","user","save","response","status","send","message","console","log","login","findOne","compareSync","token","generateAccessToken","toJSON","getAllUsers","find","users","json","getOneUser","params","updateUserPassword","updatePassword","newUser","findOneAndUpdate","updateUser","deleteUser","findOneAndDelete","getAllUsersChat","next","$and","_id","$ne","id","select","searchName","name","updateSupervisor","supervisor","$set","updateCoSupervisor","cosupervisor","getOneUserName","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;eACoBA,OAAO,CAAC,SAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,IAAI,GAAGF,OAAO,CAAC,oBAAD,CAApB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,sBAAD,CAApB;;AAEA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,UAAAA,QAFO,GAEIF,GAAG,CAACG,IAAJ,CAASD,QAFb;AAGPE,UAAAA,SAHO,GAGKJ,GAAG,CAACG,IAAJ,CAASC,SAHd;AAIPC,UAAAA,KAJO,GAICL,GAAG,CAACG,IAAJ,CAASE,KAJV;AAKPC,UAAAA,SALO,GAKKN,GAAG,CAACG,IAAJ,CAASG,SALd;AAMPC,UAAAA,MANO,GAMEP,GAAG,CAACG,IAAJ,CAASI,MANX;AAOPC,UAAAA,GAPO,GAODR,GAAG,CAACG,IAAJ,CAASM,QAPR;AAQPC,UAAAA,IARO,GAQAV,GAAG,CAACG,IAAJ,CAASO,IART;AASPC,UAAAA,OATO,GASGX,GAAG,CAACG,IAAJ,CAASQ,OATZ;AAUPC,UAAAA,WAVO,GAUOZ,GAAG,CAACG,IAAJ,CAASS,WAVhB;AAWPC,UAAAA,UAXO,GAWMb,GAAG,CAACG,IAAJ,CAASU,UAXf;AAYPC,UAAAA,KAZO,GAYCd,GAAG,CAACG,IAAJ,CAASW,KAZV;AAcPC,UAAAA,IAdO,GAcArB,MAAM,CAACsB,WAAP,CAAmB,EAAnB,CAdA;AAePP,UAAAA,QAfO,GAeIf,MAAM,CAACuB,QAAP,CAAgBT,GAAhB,EAAqBO,IAArB,CAfJ;AAiBPG,UAAAA,IAjBO,GAiBA,IAAIpB,IAAJ,CAAS;AAClBI,YAAAA,QAAQ,EAARA,QADkB;AAElBE,YAAAA,SAAS,EAATA,SAFkB;AAGlBC,YAAAA,KAAK,EAALA,KAHkB;AAIlBC,YAAAA,SAAS,EAATA,SAJkB;AAKlBC,YAAAA,MAAM,EAANA,MALkB;AAMlBE,YAAAA,QAAQ,EAARA,QANkB;AAOlBC,YAAAA,IAAI,EAAJA,IAPkB;AAQlBC,YAAAA,OAAO,EAAPA,OARkB;AASlBC,YAAAA,WAAW,EAAXA,WATkB;AAUlBC,YAAAA,UAAU,EAAVA,UAVkB;AAWlBC,YAAAA,KAAK,EAALA;AAXkB,WAAT,CAjBA;AAAA;AAAA;AAAA,0CAgCYI,IAAI,CAACC,IAAL,EAhCZ;;AAAA;AAgCLC,UAAAA,QAhCK;;AAAA,eAiCLA,QAjCK;AAAA;AAAA;AAAA;;AAAA,2CAkCEnB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAlCF;;AAAA;AAAA,2CAoCEtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CApCF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuCTC,UAAAA,OAAO,CAACC,GAAR;AAvCS,2CAwCFxB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAxCE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AA6CA,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAAO1B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACJI,UAAAA,KADI,GACIL,GAAG,CAACG,IAAJ,CAASE,KADb;AAEJI,UAAAA,QAFI,GAEOT,GAAG,CAACG,IAAJ,CAASM,QAFhB;AAAA;AAAA;AAAA,0CAMaX,IAAI,CAAC6B,OAAL,CAAa;AAAEtB,YAAAA,KAAK,EAAEA;AAAT,WAAb,CANb;;AAAA;AAMAa,UAAAA,IANA;;AAAA,eAOFA,IAPE;AAAA;AAAA;AAAA;;AAAA,gBASEA,IAAI,IAAIxB,MAAM,CAACkC,WAAP,CAAmBnB,QAAnB,EAA6BS,IAAI,CAACT,QAAlC,CATV;AAAA;AAAA;AAAA;;AAUQoB,UAAAA,KAVR,GAUgBhC,IAAI,CAACiC,mBAAL,CAAyBzB,KAAzB,CAVhB,EAWE;;AAXF,4CAYSJ,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,mBAA0BJ,IAAI,CAACa,MAAL,EAA1B;AAAyCF,YAAAA,KAAK,EAALA;AAAzC,aAZT;;AAAA;AAAA,4CAeS5B,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAfT;;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAkBKtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAlBL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAqBCtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CArBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AA2BA,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAAOhC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAGMH,IAAI,CAACmC,IAAL,EAHN;;AAAA;AAGRC,UAAAA,KAHQ;;AAAA,eAIRA,KAJQ;AAAA;AAAA;AAAA;;AAAA,4CAKDjC,GAAG,CAACkC,IAAJ,CAASD,KAAT,CALC;;AAAA;AAAA,4CAODjC,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAPC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAULtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAcA,IAAMa,UAAU,GAAG,SAAbA,UAAa,CAAOpC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTI,UAAAA,KADS,GACDL,GAAG,CAACqC,MAAJ,CAAWhC,KADV;AAAA;AAAA;AAAA,0CAIMP,IAAI,CAAC6B,OAAL,CAAa;AAC1BtB,YAAAA,KAAK,EAAEA;AADmB,WAAb,CAJN;;AAAA;AAIPa,UAAAA,IAJO;;AAAA,eAOPA,IAPO;AAAA;AAAA;AAAA;;AAAA,4CAQAjB,GAAG,CAACkC,IAAJ,CAASjB,IAAT,CARA;;AAAA;AAAA,4CAUAjB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAaJtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAiBA,IAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOtC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBI,UAAAA,KADiB,GACTL,GAAG,CAACqC,MAAJ,CAAWhC,KADF;AAEjBI,UAAAA,QAFiB,GAENT,GAAG,CAACqC,MAAJ,CAAW7B,GAFL;AAAA;AAAA;AAAA,0CAKAV,IAAI,CAAC6B,OAAL,CAAa;AAAEtB,YAAAA,KAAK,EAALA;AAAF,WAAb,CALA;;AAAA;AAKba,UAAAA,IALa;;AAAA,eAMfA,IANe;AAAA;AAAA;AAAA;;AAOTH,UAAAA,IAPS,GAOFrB,MAAM,CAACsB,WAAP,CAAmB,EAAnB,CAPE;AAQTuB,UAAAA,cARS,GAQQ7C,MAAM,CAACuB,QAAP,CAAgBR,QAAhB,EAA0BM,IAA1B,CARR;AAUTyB,UAAAA,OAVS,GAUC;AACZtC,YAAAA,QAAQ,EAAEgB,IAAI,CAAChB,QADH;AAEZE,YAAAA,SAAS,EAAEc,IAAI,CAACd,SAFJ;AAGZC,YAAAA,KAAK,EAAEa,IAAI,CAACb,KAHA;AAIZC,YAAAA,SAAS,EAAEY,IAAI,CAACZ,SAJJ;AAKZC,YAAAA,MAAM,EAAEW,IAAI,CAACX,MALD;AAMZE,YAAAA,QAAQ,EAAE8B,cANE;AAOZ7B,YAAAA,IAAI,EAAEQ,IAAI,CAACR,IAPC;AAQZC,YAAAA,OAAO,EAAEO,IAAI,CAACP,OARF;AASZC,YAAAA,WAAW,EAAEM,IAAI,CAACN,WATN;AAUZC,YAAAA,UAAU,EAAEK,IAAI,CAACL,UAVL;AAWZC,YAAAA,KAAK,EAAEI,IAAI,CAACJ;AAXA,WAVD;AAAA;AAAA;AAAA,0CAyBYhB,IAAI,CAAC2C,gBAAL,CAAsB;AAAEpC,YAAAA,KAAK,EAAEA;AAAT,WAAtB,EAAwCmC,OAAxC,CAzBZ;;AAAA;AAyBLpB,UAAAA,QAzBK;;AAAA,eA0BPA,QA1BO;AAAA;AAAA;AAAA;;AAAA,4CA2BAnB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CA3BA;;AAAA;AAAA,4CA6BAtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CA7BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAiCJtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAjCI;;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAqCRtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CArCQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAyCZtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAzCY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AA8CA,IAAMmB,UAAU,GAAG,SAAbA,UAAa,CAAO1C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTI,UAAAA,KADS,GACDL,GAAG,CAACqC,MAAJ,CAAWhC,KADV;AAAA;AAAA,0CAGIP,IAAI,CAAC6B,OAAL,CAAa;AAAEtB,YAAAA,KAAK,EAAEA;AAAT,WAAb,CAHJ;;AAAA;AAGTa,UAAAA,IAHS;AAKTT,UAAAA,QALS,GAKES,IAAI,CAACT,QALP;AAQT+B,UAAAA,OARS,GAQC;AACZtC,YAAAA,QAAQ,EAAEF,GAAG,CAACG,IAAJ,CAASD,QADP;AAEZE,YAAAA,SAAS,EAAEJ,GAAG,CAACG,IAAJ,CAASC,SAFR;AAGZC,YAAAA,KAAK,EAAEL,GAAG,CAACG,IAAJ,CAASE,KAHJ;AAIZC,YAAAA,SAAS,EAAEN,GAAG,CAACG,IAAJ,CAASG,SAJR;AAKZC,YAAAA,MAAM,EAAEP,GAAG,CAACG,IAAJ,CAASI,MALL;AAMZE,YAAAA,QAAQ,EAAEA,QANE;AAOZC,YAAAA,IAAI,EAAEV,GAAG,CAACG,IAAJ,CAASO,IAPH;AAQZC,YAAAA,OAAO,EAAEX,GAAG,CAACG,IAAJ,CAASQ,OARN;AASZC,YAAAA,WAAW,EAAEZ,GAAG,CAACG,IAAJ,CAASS,WATV;AAUZC,YAAAA,UAAU,EAAEb,GAAG,CAACG,IAAJ,CAASU,UAVT;AAWZC,YAAAA,KAAK,EAAEd,GAAG,CAACG,IAAJ,CAASW;AAXJ,WARD;AAAA;AAAA;AAAA,0CAuBYhB,IAAI,CAAC2C,gBAAL,CAAsB;AAAEpC,YAAAA,KAAK,EAAEA;AAAT,WAAtB,EAAwCmC,OAAxC,CAvBZ;;AAAA;AAuBLpB,UAAAA,QAvBK;;AAAA,eAwBPA,QAxBO;AAAA;AAAA;AAAA;;AAAA,4CAyBAnB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAzBA;;AAAA;AAAA,4CA2BAtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CA3BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CA+BJtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CA/BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAoCA,IAAMoB,UAAU,GAAG,SAAbA,UAAa,CAAO3C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTI,UAAAA,KADS,GACDL,GAAG,CAACqC,MAAJ,CAAWhC,KADV;AAAA;AAAA;AAAA,0CAIQP,IAAI,CAAC8C,gBAAL,CAAsB;AAAEvC,YAAAA,KAAK,EAAEA;AAAT,WAAtB,CAJR;;AAAA;AAILa,UAAAA,IAJK;;AAAA,eAKPA,IALO;AAAA;AAAA;AAAA;;AAAA,4CAMAjB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CANA;;AAAA;AAAA,4CAQAtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAYJtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAZI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAiBA,IAAMsB,eAAe,GAAG,SAAlBA,eAAkB,CAAO7C,GAAP,EAAYC,GAAZ,EAAiB6C,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACdnC,UAAAA,OADc,GACJX,GAAG,CAACqC,MAAJ,CAAW1B,OADP;AAAA;AAAA;AAAA,0CAGIb,IAAI,CAACmC,IAAL,CAAU;AAAEc,YAAAA,IAAI,EAAE,CAAC;AAAEC,cAAAA,GAAG,EAAE;AAAEC,gBAAAA,GAAG,EAAEjD,GAAG,CAACqC,MAAJ,CAAWa;AAAlB;AAAP,aAAD,EAAkC;AAAEvC,cAAAA,OAAO,EAAPA;AAAF,aAAlC;AAAR,WAAV,EAAoEwC,MAApE,CAA2E,CAC3F,OAD2F,EAE3F,UAF2F,EAG3F,KAH2F,EAI3F,SAJ2F,CAA3E,CAHJ;;AAAA;AAGVjB,UAAAA,KAHU;AAAA,4CASTjC,GAAG,CAACkC,IAAJ,CAASD,KAAT,CATS;;AAAA;AAAA;AAAA;AAWhBY,UAAAA,IAAI,cAAJ;;AAXgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAeA,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAAOpD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACToD,UAAAA,IADS,GACFrD,GAAG,CAACqC,MAAJ,CAAWgB,IADT;AAAA;AAAA;AAAA,0CAIQvD,IAAI,CAAC6B,OAAL,CAAa;AAAEzB,YAAAA,QAAQ,EAAEmD;AAAZ,WAAb,CAJR;;AAAA;AAILnC,UAAAA,IAJK;;AAAA,eAKPA,IALO;AAAA;AAAA;AAAA;;AAAA,4CAMAjB,GAAG,CAACkC,IAAJ,CAASjB,IAAT,CANA;;AAAA;AAAA,4CAQAjB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAYJtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAZI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAiBA,IAAM+B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOtD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfsD,UAAAA,UAFe,GAEFvD,GAAG,CAACqC,MAAJ,CAAWkB,UAFT;AAGfrD,UAAAA,QAHe,GAGJF,GAAG,CAACqC,MAAJ,CAAWgB,IAHP;AAAA;AAAA;AAAA,0CAMMvD,IAAI,CAAC2C,gBAAL,CACnB;AAAEvC,YAAAA,QAAQ,EAAEA;AAAZ,WADmB,EAEnB;AAAEsD,YAAAA,IAAI,EAAE;AAAE,4BAAcD;AAAhB;AAAR,WAFmB,CANN;;AAAA;AAMXnC,UAAAA,QANW;AAUjBI,UAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;;AAViB,eAWbA,QAXa;AAAA;AAAA;AAAA;;AAAA,6CAaNnB,GAAG,CAACkC,IAAJ,CAASf,QAAT,CAbM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBjBI,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AAhBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAqBA,IAAMgC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOzD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjByD,UAAAA,YAFiB,GAEF1D,GAAG,CAACqC,MAAJ,CAAWqB,YAFT;AAGjBxD,UAAAA,QAHiB,GAGNF,GAAG,CAACqC,MAAJ,CAAWgB,IAHL;AAAA;AAAA;AAAA,0CAKIvD,IAAI,CAAC2C,gBAAL,CACnB;AAAEvC,YAAAA,QAAQ,EAAEA;AAAZ,WADmB,EAEnB;AAAEsD,YAAAA,IAAI,EAAE;AAAE,8BAAgBE;AAAlB;AAAR,WAFmB,CALJ;;AAAA;AAKbtC,UAAAA,QALa;;AAAA,eASfA,QATe;AAAA;AAAA;AAAA;;AAAA,6CAURnB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAanBC,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAoBA,IAAMkC,cAAc,GAAG,SAAjBA,cAAiB,CAAO3D,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACbI,UAAAA,KADa,GACLL,GADK;AAAA;AAAA;AAAA,0CAIEF,IAAI,CAAC6B,OAAL,CAAa;AAC1BtB,YAAAA,KAAK,EAAEA;AADmB,WAAb,CAJF;;AAAA;AAIXa,UAAAA,IAJW;;AAAA,eAOXA,IAPW;AAAA;AAAA;AAAA;;AAAA,6CAQJA,IARI;;AAAA;AAAA,6CAUJjB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAaRtB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAbQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAkBAqC,MAAM,CAACC,OAAP,GAAiB;AACb9D,EAAAA,QAAQ,EAARA,QADa;AAEb2B,EAAAA,KAAK,EAALA,KAFa;AAGbM,EAAAA,WAAW,EAAXA,WAHa;AAIbI,EAAAA,UAAU,EAAVA,UAJa;AAKbE,EAAAA,kBAAkB,EAAlBA,kBALa;AAMbI,EAAAA,UAAU,EAAVA,UANa;AAObC,EAAAA,UAAU,EAAVA,UAPa;AAQbE,EAAAA,eAAe,EAAfA,eARa;AASbO,EAAAA,UAAU,EAAVA,UATa;AAUbE,EAAAA,gBAAgB,EAAhBA,gBAVa;AAWbG,EAAAA,kBAAkB,EAAlBA,kBAXa;AAYbE,EAAAA,cAAc,EAAdA;AAZa,CAAjB","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst { request } = require('express');\r\nconst auth = require('../middlewares/jwt')\r\nconst User = require('../models/user.model')\r\n\r\nconst register = async (req, res) => {\r\n\r\n    const fullname = req.body.fullname;\r\n    const studentId = req.body.studentId;\r\n    const email = req.body.email;\r\n    const contactNo = req.body.contactNo;\r\n    const degree = req.body.degree;\r\n    const pwd = req.body.password;\r\n    const role = req.body.role;\r\n    const groupId = req.body.groupId;\r\n    const isAvailable = req.body.isAvailable;\r\n    const department = req.body.department;\r\n    const field = req.body.field;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const user = new User({\r\n        fullname,\r\n        studentId,\r\n        email,\r\n        contactNo,\r\n        degree,\r\n        password,\r\n        role,\r\n        groupId,\r\n        isAvailable,\r\n        department,\r\n        field\r\n    })\r\n\r\n    try {\r\n        let response = await user.save();\r\n        if (response) {\r\n            return res.status(201).send({ message: 'New User registered' });\r\n        } else {\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(400).send({ message: 'Error while registering a user' })\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n\r\n    try {\r\n        const user = await User.findOne({ email: email });\r\n        if (user) {\r\n\r\n            if (user && bcrypt.compareSync(password, user.password)) {\r\n                const token = auth.generateAccessToken(email);\r\n                // call toJSON method applied during model instantiation\r\n                return res.status(200).send({ ...user.toJSON(), token });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllUsers = async (req, res) => {\r\n\r\n    try {\r\n        let users = await User.find();\r\n        if (users) {\r\n            return res.json(users)\r\n        } else {\r\n            return res.status(404).send({ message: 'Error on retrieving users' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneUser = async (req, res) => {\r\n    const email = req.params.email\r\n\r\n    try {\r\n        let user = await User.findOne({\r\n            email: email\r\n        });\r\n        if (user) {\r\n            return res.json(user)\r\n        } else {\r\n            return res.status(404).send({ message: 'No such user found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateUserPassword = async (req, res) => {\r\n    const email = req.params.email;\r\n    const password = req.params.pwd;\r\n\r\n    try {\r\n        const user = await User.findOne({ email });\r\n        if (user) {\r\n            const salt = bcrypt.genSaltSync(10);\r\n            const updatePassword = bcrypt.hashSync(password, salt);\r\n\r\n            const newUser = {\r\n                fullname: user.fullname,\r\n                studentId: user.studentId,\r\n                email: user.email,\r\n                contactNo: user.contactNo,\r\n                degree: user.degree,\r\n                password: updatePassword,\r\n                role: user.role,\r\n                groupId: user.groupId,\r\n                isAvailable: user.isAvailable,\r\n                department: user.department,\r\n                field: user.field\r\n            }\r\n\r\n            try {\r\n                const response = await User.findOneAndUpdate({ email: email }, newUser);\r\n                if (response) {\r\n                    return res.status(200).send({ message: 'Successfully updated Password' });\r\n                } else {\r\n                    return res.status(500).send({ message: 'Internal server error' });\r\n                }\r\n\r\n            } catch (err) {\r\n                return res.status(400).send({ message: 'Unable to update recheck your email' })\r\n            }\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such user with entered email' })\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(404).send({ message: 'No such user with entered email' })\r\n    }\r\n\r\n}\r\n\r\nconst updateUser = async (req, res) => {\r\n    const email = req.params.email;\r\n\r\n    const user = await User.findOne({ email: email });\r\n\r\n    const password = user.password;\r\n\r\n\r\n    const newUser = {\r\n        fullname: req.body.fullname,\r\n        studentId: req.body.studentId,\r\n        email: req.body.email,\r\n        contactNo: req.body.contactNo,\r\n        degree: req.body.degree,\r\n        password: password,\r\n        role: req.body.role,\r\n        groupId: req.body.groupId,\r\n        isAvailable: req.body.isAvailable,\r\n        department: req.body.department,\r\n        field: req.body.field\r\n    }\r\n\r\n    try {\r\n        const response = await User.findOneAndUpdate({ email: email }, newUser);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated User Details' });\r\n        } else {\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update recheck your email' })\r\n    }\r\n\r\n}\r\n\r\nconst deleteUser = async (req, res) => {\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        const user = await User.findOneAndDelete({ email: email });\r\n        if (user) {\r\n            return res.status(204).send({ message: 'Successfully deleted A User' });\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exists recheck the email' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst getAllUsersChat = async (req, res, next) => {\r\n    const groupId = req.params.groupId\r\n    try {\r\n        const users = await User.find({ $and: [{ _id: { $ne: req.params.id } }, { groupId }] }).select([\r\n            \"email\",\r\n            \"fullname\",\r\n            \"_id\",\r\n            \"groupId\"\r\n        ]);\r\n        return res.json(users);\r\n    } catch (ex) {\r\n        next(ex);\r\n    }\r\n  };\r\n\r\nconst searchName = async (req, res) => {\r\n    const name = req.params.name;\r\n\r\n    try {\r\n        const user = await User.findOne({ fullname: name });\r\n        if (user) {\r\n            return res.json(user)\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exists recheck the email' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst updateSupervisor = async (req, res) => {\r\n\r\n    const supervisor = req.params.supervisor\r\n    const fullname = req.params.name\r\n\r\n    try {\r\n        const response = await User.findOneAndUpdate(\r\n            { fullname: fullname },\r\n            { $set: { \"supervisor\": supervisor } }\r\n        )\r\n        console.log(response)\r\n        if (response) {\r\n            // return res.status(200).send({ message: 'Updated user' });\r\n            return res.json(response)\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\", err)\r\n    }\r\n\r\n}\r\n\r\nconst updateCoSupervisor = async (req, res) => {\r\n\r\n    const cosupervisor = req.params.cosupervisor\r\n    const fullname = req.params.name\r\n    try {\r\n        const response = await User.findOneAndUpdate(\r\n            { fullname: fullname },\r\n            { $set: { \"cosupervisor\": cosupervisor } }\r\n        )\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Updated user' });\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\", err)\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst getOneUserName = async (req, res) => {\r\n    const email = req\r\n\r\n    try {\r\n        let user = await User.findOne({\r\n            email: email\r\n        });\r\n        if (user) {\r\n            return user\r\n        } else {\r\n            return res.status(404).send({ message: 'No such user found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    register,\r\n    login,\r\n    getAllUsers,\r\n    getOneUser,\r\n    updateUserPassword,\r\n    updateUser,\r\n    deleteUser,\r\n    getAllUsersChat,\r\n    searchName,\r\n    updateSupervisor,\r\n    updateCoSupervisor,\r\n    getOneUserName\r\n\r\n}"],"file":"user.controller.dev.js"}