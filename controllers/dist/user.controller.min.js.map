{"version":3,"sources":["user.controller.js"],"names":["bcrypt","require","request","auth","User","register","req","res","fullname","studentId","email","contactNo","degree","pwd","role","groupId","isAvailable","department","field","salt","password","user","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","save","sent","abrupt","send","message","t0","stop","login","token","_context2","findOne","compareSync","generateAccessToken","status","_objectSpread","toJSON","console","log","find","users","json","getOneUser","_context4","params","updateUserPassword","updatePassword","newUser","_context5","t1","updateUser","_context6","findOneAndUpdate","deleteUser","_context7","findOneAndDelete","getAllUsersChat","_context8","searchName","name","_context9","updateSupervisor","supervisor","response","_context10","updateCoSupervisor","cosupervisor","_context11","$set","_context12","module","exports","getAllUsers","getOneUserName"],"mappings":"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","file":"user.controller.min.js","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst { request } = require('express');\r\nconst auth = require('../middlewares/jwt')\r\nconst User = require('../models/user.model')\r\n\r\nconst register = async (req, res) => {\r\n\r\n    const fullname = req.body.fullname;\r\n    const studentId = req.body.studentId;\r\n    const email = req.body.email;\r\n    const contactNo = req.body.contactNo;\r\n    const degree = req.body.degree;\r\n    const pwd = req.body.password;\r\n    const role = req.body.role;\r\n    const groupId = req.body.groupId;\r\n    const isAvailable = req.body.isAvailable;\r\n    const department = req.body.department;\r\n    const field = req.body.field;\r\n\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const password = bcrypt.hashSync(pwd, salt);\r\n\r\n    const user = new User({\r\n        fullname,\r\n        studentId,\r\n        email,\r\n        contactNo,\r\n        degree,\r\n        password,\r\n        role,\r\n        groupId,\r\n        isAvailable,\r\n        department,\r\n        field\r\n    })\r\n\r\n    try {\r\n        let response = await user.save();\r\n        if (response) {\r\n            return res.status(201).send({ message: 'New User registered' });\r\n        } else {\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(400).send({ message: 'Error while registering a user' })\r\n    }\r\n\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n\r\n    try {\r\n        const user = await User.findOne({ email: email });\r\n        if (user) {\r\n\r\n            if (user && bcrypt.compareSync(password, user.password)) {\r\n                const token = auth.generateAccessToken(email);\r\n                // call toJSON method applied during model instantiation\r\n                return res.status(200).send({ ...user.toJSON(), token });\r\n            }\r\n            else {\r\n                return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n            }\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exist' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Such user does not exist check your credentials' })\r\n    }\r\n\r\n}\r\n\r\n\r\nconst getAllUsers = async (req, res) => {\r\n\r\n    try {\r\n        let users = await User.find();\r\n        if (users) {\r\n            return res.json(users)\r\n        } else {\r\n            return res.status(404).send({ message: 'Error on retrieving users' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal server error' })\r\n    }\r\n}\r\n\r\nconst getOneUser = async (req, res) => {\r\n    const email = req.params.email\r\n\r\n    try {\r\n        let user = await User.findOne({\r\n            email: email\r\n        });\r\n        if (user) {\r\n            return res.json(user)\r\n        } else {\r\n            return res.status(404).send({ message: 'No such user found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\nconst updateUserPassword = async (req, res) => {\r\n    const email = req.params.email;\r\n    const password = req.params.pwd;\r\n\r\n    try {\r\n        const user = await User.findOne({ email });\r\n        if (user) {\r\n            const salt = bcrypt.genSaltSync(10);\r\n            const updatePassword = bcrypt.hashSync(password, salt);\r\n\r\n            const newUser = {\r\n                fullname: user.fullname,\r\n                studentId: user.studentId,\r\n                email: user.email,\r\n                contactNo: user.contactNo,\r\n                degree: user.degree,\r\n                password: updatePassword,\r\n                role: user.role,\r\n                groupId: user.groupId,\r\n                isAvailable: user.isAvailable,\r\n                department: user.department,\r\n                field: user.field\r\n            }\r\n\r\n            try {\r\n                const response = await User.findOneAndUpdate({ email: email }, newUser);\r\n                if (response) {\r\n                    return res.status(200).send({ message: 'Successfully updated Password' });\r\n                } else {\r\n                    return res.status(500).send({ message: 'Internal server error' });\r\n                }\r\n\r\n            } catch (err) {\r\n                return res.status(400).send({ message: 'Unable to update recheck your email' })\r\n            }\r\n\r\n        } else {\r\n            return res.status(404).send({ message: 'No such user with entered email' })\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(404).send({ message: 'No such user with entered email' })\r\n    }\r\n\r\n}\r\n\r\nconst updateUser = async (req, res) => {\r\n    const email = req.params.email;\r\n\r\n    const user = await User.findOne({ email: email });\r\n\r\n    const password = user.password;\r\n\r\n\r\n    const newUser = {\r\n        fullname: req.body.fullname,\r\n        studentId: req.body.studentId,\r\n        email: req.body.email,\r\n        contactNo: req.body.contactNo,\r\n        degree: req.body.degree,\r\n        password: password,\r\n        role: req.body.role,\r\n        groupId: req.body.groupId,\r\n        isAvailable: req.body.isAvailable,\r\n        department: req.body.department,\r\n        field: req.body.field\r\n    }\r\n\r\n    try {\r\n        const response = await User.findOneAndUpdate({ email: email }, newUser);\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Successfully updated User Details' });\r\n        } else {\r\n            return res.status(500).send({ message: 'Internal server error' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(400).send({ message: 'Unable to update recheck your email' })\r\n    }\r\n\r\n}\r\n\r\nconst deleteUser = async (req, res) => {\r\n    const email = req.params.email;\r\n\r\n    try {\r\n        const user = await User.findOneAndDelete({ email: email });\r\n        if (user) {\r\n            return res.status(204).send({ message: 'Successfully deleted A User' });\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exists recheck the email' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst getAllUsersChat = async (req, res, next) => {\r\n    const groupId = req.params.groupId\r\n    try {\r\n        const users = await User.find({ $and: [{ _id: { $ne: req.params.id } }, { groupId }] }).select([\r\n            \"email\",\r\n            \"fullname\",\r\n            \"_id\",\r\n            \"groupId\"\r\n        ]);\r\n        return res.json(users);\r\n    } catch (ex) {\r\n        next(ex);\r\n    }\r\n  };\r\n\r\nconst searchName = async (req, res) => {\r\n    const name = req.params.name;\r\n\r\n    try {\r\n        const user = await User.findOne({ fullname: name });\r\n        if (user) {\r\n            return res.json(user)\r\n        } else {\r\n            return res.status(404).send({ message: 'Such user does not exists recheck the email' });\r\n        }\r\n\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n\r\n}\r\n\r\nconst updateSupervisor = async (req, res) => {\r\n\r\n    const supervisor = req.params.supervisor\r\n    const fullname = req.params.name\r\n\r\n    try {\r\n        const response = await User.findOneAndUpdate(\r\n            { fullname: fullname },\r\n            { $set: { \"supervisor\": supervisor } }\r\n        )\r\n        console.log(response)\r\n        if (response) {\r\n            // return res.status(200).send({ message: 'Updated user' });\r\n            return res.json(response)\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\", err)\r\n    }\r\n\r\n}\r\n\r\nconst updateCoSupervisor = async (req, res) => {\r\n\r\n    const cosupervisor = req.params.cosupervisor\r\n    const fullname = req.params.name\r\n    try {\r\n        const response = await User.findOneAndUpdate(\r\n            { fullname: fullname },\r\n            { $set: { \"cosupervisor\": cosupervisor } }\r\n        )\r\n        if (response) {\r\n            return res.status(200).send({ message: 'Updated user' });\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error while updating user>>\", err)\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst getOneUserName = async (req, res) => {\r\n    const email = req\r\n\r\n    try {\r\n        let user = await User.findOne({\r\n            email: email\r\n        });\r\n        if (user) {\r\n            return user\r\n        } else {\r\n            return res.status(404).send({ message: 'No such user found' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(500).send({ message: 'Internal Server Error' })\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    register,\r\n    login,\r\n    getAllUsers,\r\n    getOneUser,\r\n    updateUserPassword,\r\n    updateUser,\r\n    deleteUser,\r\n    getAllUsersChat,\r\n    searchName,\r\n    updateSupervisor,\r\n    updateCoSupervisor,\r\n    getOneUserName\r\n\r\n}"]}